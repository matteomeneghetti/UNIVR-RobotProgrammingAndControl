#!/usr/bin/env python3

from typing import Iterable
import rospy
import numpy as np
from math import atan2, pi, sqrt, acos
import plotly.offline as py
import plotly.graph_objs as go
from geometry_msgs.msg import Point
from homework.srv import CheckTarget, CheckTargetRequest, CheckTargetResponse

# Link lengths
d1 = 0.4
a1 = 0.3
a2 = 0.3
d4 = -0.5

"""
# DH parameter table
DH_table = [
    [0, a1, d1, theta1],
    [0, a2, 0, theta2],
    [0, 0, theta3, 0],
    [pi, 0, d4, theta4]
]

# Homogeneous Transformation Matrices
H0_e = [
    [np.cos(theta1+theta2+theta4), np.sin(theta1+theta2+theta4), 0, a1*np.cos(theta1)+a2*np.cos(theta1+theta2)],
    [np.sin(theta1+theta2+theta4), -np.cos(theta1+theta2+theta4), 0, a1*np.sin(theta1)+a2*np.sin(theta1+theta2)],
    [0, 0, -1, d1 + theta3 + d4],
    [0, 0, 0, 1]
]
"""

def fk(configuration: Iterable):
    q1, q2, q3, q4 = configuration
    return (
        a1*np.cos(q1)+a2*np.cos(q1+q2),
        a1*np.sin(q1)+a2*np.sin(q1+q2),
        d1 + q3 + d4,
        q1+q2+q4
    )

def ik(target: Point, rotation: float):

    try:
        gamma = atan2(target.y, target.x)
        d = sqrt(target.x**2 + target.y**2)

        if (d == 0) or (a1+a2 < d < abs(a1-a2)):
            return False

        beta = acos((a1**2 + d**2 - a2**2) / (2*a1*d))

        q1 = gamma + beta

        delta = acos((a1**2 + a2**2 - d**2) / (2*a1*a2))
        q2 = -pi+delta

        q3 = d1 + d4 - target.z

        q4 = rotation - q1 - q2
    
    except:
        return False

    if not ((-2.5 < q1 < 2.5) and (-2.0 < q2 < 2.0) and (-0.45 < q3 < 0.0) and (-3.0 < q4 < 3.0)):
        return False

    return (q1, q2, q3, q4)

def plot() -> None:

    j1_space = np.linspace(-2.5, 2.5)
    j2_space = np.linspace(-2.0, 2.0)
    j3_space = np.linspace(0, 0.45)
    t1, t2 = np.meshgrid(j1_space, j2_space)

    x = a1*np.cos(t1)+a2*np.cos(t1+t2)
    y = a1*np.sin(t1)+a2*np.sin(t1+t2)

    data = []
    for i, value in enumerate(j3_space):
        if i%24 != 0:
            continue
        z = y*0+value
        data.append(go.Surface(z=z, x=x, y=y, colorscale='Blues', showscale=False, opacity=0.7))

    layout = go.Layout(scene = dict(xaxis = dict(title='X (m)'), yaxis = dict(title='Y (m)'), zaxis = dict(title='Z (m)'),),)

    fig = go.Figure(data=data, layout=layout)
    py.plot(fig)

def callback(request: CheckTargetRequest) -> CheckTargetResponse : 
    result = ik(request.target, request.rotation)
    return CheckTargetResponse(bool(result))

if __name__ == "__main__":

    try:
        rospy.init_node("homework_services_node", anonymous=True)
        rospy.loginfo("Starting services...")
        check_service = rospy.Service("/homework/check", CheckTarget, callback)
        rospy.loginfo("Services started, spinning...")
        rospy.spin()

    except rospy.ROSInterruptException:
        pass
